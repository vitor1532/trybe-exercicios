const countries = require('./countries');

// ExercÃ­cio 1
// Crie a funÃ§Ã£o getPopulation que retorne a quantidade total da populaÃ§Ã£o de todos os paÃ­ses.

// De olho na dica ğŸ‘€: o valor inicial deve comeÃ§ar com 0, portanto o acumulador Ã© um nÃºmero.

const getPopulation = countries.reduce((acc, current) => acc + current.population, 0);

// console.log(getPopulation);

// ExercÃ­cio 2
// ğŸš€ Crie a funÃ§Ã£o longestName que deve retornar o paÃ­s com o maior nome.

// De olho na dica ğŸ‘€: o reduce consegue comparar o valor do primeiro com o segundo parÃ¢metro. Compare o tamanho da string name do primeiro parÃ¢metro com a do segundo parÃ¢metro e retorne aquele que for maior.

// const expectedResult = {
//   name: 'American Samoa',
//   region: 'Oceania',
//   currencies: [{ code: 'USD', name: 'United States Dollar' }],
//   capital: 'Pago Pago',
//   population: 55197,
//   area: 199
// };

const longestName = () => {
  return countries.reduce((acc, current) => acc.name.length > current.name.length ? acc : current);
}

// console.log(longestName());

// ExercÃ­cio 3
// ğŸš€ Crie uma funÃ§Ã£o chamada totalAreaByRegion que recebe um parÃ¢metro opcional region com o valor padrÃ£o â€˜Europeâ€™. Essa funÃ§Ã£o calcula e retorna a Ã¡rea total de todos os paÃ­ses de uma determinada regiÃ£o.

// ExercÃ­cio 4
// ğŸš€ Crie uma funÃ§Ã£o chamada getLargestCountriesByRegion que retorna um objeto contendo os paÃ­ses com a maior Ã¡rea em cada regiÃ£o. O objeto de retorno deve ter a seguinte estrutura:

// {
//   Asia: { name: 'Afghanistan', area: 652230 },
//   Europe: { name: 'Russia', area: 17098242 },
//   // ...
// }